/*
 * Copyright (C) 2013 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/container.h>
#include <gtkmm/enums.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/container_p.h)

namespace Gtk
{
_CC_INCLUDE(gtk/gtk.h)

/** A container that shows only one child at a time.
 *
 * Gtk::Stack does not provide a means for users to change the visible
 * child. Instead, the Gtk::StackSwitcher widget can be used with
 * Gtk::Stack to provide this functionality.
 *
 * @ingroup Widgets
 * @newin{3,10}
 */
class Stack
  : public Container
{
  _CLASS_GTKOBJECT(Stack,GtkStack,GTK_STACK,Gtk::Container,GtkContainer)
public:
  _CTOR_DEFAULT

  _WRAP_METHOD(void add(Widget& child, const Glib::ustring& name), gtk_stack_add_named)

  _WRAP_METHOD(void add(Widget& child, const Glib::ustring& name, const Glib::ustring& title), gtk_stack_add_titled)

  _WRAP_METHOD(void set_visible_child(Widget& child), gtk_stack_set_visible_child)

  _WRAP_METHOD(Widget* get_visible_child(), gtk_stack_get_visible_child)
  _WRAP_METHOD(const Widget* get_visible_child() const, gtk_stack_get_visible_child, constversion)

  _WRAP_METHOD(void set_visible_child(const Glib::ustring& name), gtk_stack_set_visible_child_name)
  _WRAP_METHOD(void set_visible_child(const Glib::ustring& name, StackTransitionType transition), gtk_stack_set_visible_child_full)
  _WRAP_METHOD(Glib::ustring get_visible_child_name() const, gtk_stack_get_visible_child_name)

  _WRAP_METHOD(void set_homogeneous(bool homogeneous = true), gtk_stack_set_homogeneous)
  _WRAP_METHOD(bool get_homogeneous() const, gtk_stack_get_homogeneous)

  _WRAP_METHOD(void set_transition_duration(guint duration), gtk_stack_set_transition_duration)
  _WRAP_METHOD(guint get_transition_duration() const, gtk_stack_get_transition_duration)

  _WRAP_METHOD(void set_transition_type(StackTransitionType transition), gtk_stack_set_transition_type)
  _WRAP_METHOD(StackTransitionType get_transition_type(), gtk_stack_get_transition_type, deprecated "Use the const method instead.")
  _WRAP_METHOD(StackTransitionType get_transition_type() const, gtk_stack_get_transition_type)

  _WRAP_METHOD(bool get_transition_running() const, gtk_stack_get_transition_running)

  _WRAP_METHOD(Widget* get_child_by_name(const Glib::ustring& name), gtk_stack_get_child_by_name)
  _WRAP_METHOD(const Widget* get_child_by_name(const Glib::ustring& name) const, gtk_stack_get_child_by_name, constversion)

  _WRAP_PROPERTY("homogeneous", bool)
  _WRAP_PROPERTY("transition-duration", unsigned int)
  _WRAP_PROPERTY("transition-running", bool)
  _WRAP_PROPERTY("transition-type", StackTransitionType)
  _WRAP_PROPERTY("visible-child", Widget*)
  _WRAP_PROPERTY("visible-child-name", Glib::ustring)
};

} //namespace Gtk
