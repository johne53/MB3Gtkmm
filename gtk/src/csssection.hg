/* Copyright (C) 2014 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/refptr.h>
#include <giomm/file.h>

_DEFS(gtkmm,gtk)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkCssSection GtkCssSection;
#endif

namespace Gtk
{
_WRAP_ENUM(CssSectionType, GtkCssSectionType)

/** Defines a part of a CSS document.
 * Because sections are nested into one another, you can use get_parent()
 * to get the containing region.
 *
 * There is no public method that creates a CssSection, but it is input data to
 * a Gtk::CssProvider::signal_parsing_error() handler.
 *
 * @newin{3,16}
 */
class CssSection
{
  _CLASS_OPAQUE_REFCOUNTED(CssSection, GtkCssSection, NONE, gtk_css_section_ref, gtk_css_section_unref)
  _IGNORE(gtk_css_section_ref, gtk_css_section_unref)

public:
  _WRAP_METHOD(CssSectionType get_section_type() const, gtk_css_section_get_section_type)
  _WRAP_METHOD(Glib::RefPtr<CssSection> get_parent(), gtk_css_section_get_parent, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const CssSection> get_parent() const, gtk_css_section_get_parent, refreturn, constversion)
  _WRAP_METHOD(Glib::RefPtr<Gio::File> get_file(), gtk_css_section_get_file, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Gio::File> get_file() const, gtk_css_section_get_file, refreturn, constversion)
  _WRAP_METHOD(unsigned int get_start_line() const, gtk_css_section_get_start_line)
  _WRAP_METHOD(unsigned int get_start_position() const, gtk_css_section_get_start_position)
  _WRAP_METHOD(unsigned int get_end_line() const, gtk_css_section_get_end_line)
  _WRAP_METHOD(unsigned int get_end_position() const, gtk_css_section_get_end_position)
};

} // namespace Gtk
