/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

//Deprecated: #include <gtkmm/stockid.h>
#include <gtkmm/action.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/action_p.h)

#m4 _PUSH(SECTION_CC_PRE_INCLUDES)
#undef GTK_DISABLE_DEPRECATED
#define GDK_DISABLE_DEPRECATION_WARNINGS 1
#m4 _POP()

//TODO: Deprecate this when we are ready. It is already deprecated in GTK+.
//_IS_DEPRECATED // This whole file is deprecated.

namespace Gtk
{

/** An action which can be toggled between two states.
 *
 * A Gtk::ToggleAction corresponds roughly to a Gtk::CheckMenuItem.
 * It has an "active" state specifying whether the action has been checked or not.
 *
 */
class ToggleAction : public Gtk::Action
{
  _CLASS_GOBJECT(ToggleAction, GtkToggleAction, GTK_TOGGLE_ACTION, Gtk::Action, GtkAction)

protected:
  /** Creates an empty toggle action. */
  _CTOR_DEFAULT

_DEPRECATE_IFDEF_START
  /** Creates a toggle action.
   *
   * @param name      A unique name for the action.
   * @param stock_id  The stock icon to display in widgets representing the
   *                  action.
   * @param label     The label displayed in menu items and on buttons.
   * @param tooltip   A tooltip for the action.
   * @param is_active The default checked state of the action.
   *
   * @deprecated Stock IDs are deprecated, so use another constructor.
   */
   explicit ToggleAction(const Glib::ustring& name, const StockID& stock_id = StockID(), const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring(), bool is_active = false);
_DEPRECATE_IFDEF_END

  /** Creates a toggle action with an icon name.
   * The toggle action's icon will reflect the specified icon name in the
   * user's icon theme.
   *
   * @param name      A unique name for the action.
   * @param icon_name An IconTheme icon name used for widgets representing the
   *                  action.
   * @param label     The label displayed in menu items and on buttons.
   * @param tooltip   A tooltip for the action.
   * @param is_active The default checked state of the action.
   */
   explicit ToggleAction(const Glib::ustring& name, const Glib::ustring& icon_name, const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring(), bool is_active = false);

public:
  //Note that gtk_toggle_action_new() does not allow name to be NULL, which suggests that we should not have a default constructor,
  //but it's OK to set the name later:
  _WRAP_CREATE()

  /** Creates a toggle action.
   *
   * @param name      A unique name for the action.
   * @param label     The label displayed in menu items and on buttons.
   * @param tooltip   A tooltip for the action.
   * @param is_active The default checked state of the action.
   *
   * @return A new ToggleAction.
   */
   static Glib::RefPtr<ToggleAction> create(const Glib::ustring& name, const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring(), bool is_active = false);

_DEPRECATE_IFDEF_START
  /** Creates a toggle action with a stock ID.
   * The tock ID is used to set a default icon, text and accelerator for
   * the toggle action.
   *
   * @param name      A unique name for the action.
   * @param stock_id  The stock icon to display in widgets representing the
   *                  action.
   * @param label     The label displayed in menu items and on buttons.
   * @param tooltip   A tooltip for the action.
   * @param is_active The default checked state of the action.
   *
   * @return A new ToggleAction.
   * @deprecated Stock IDs are deprecated, so use another create() method.
   */
   static Glib::RefPtr<ToggleAction> create(const Glib::ustring& name, const Gtk::StockID& stock_id, const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring(), bool is_active = false);
_DEPRECATE_IFDEF_END

  /** Creates a toggle action with an icon name.
   * The toggle action's icon will reflect the specified icon name in the
   * user's icon theme.
   *
   * @param name      A unique name for the action.
   * @param icon_name An IconTheme icon name used for widgets representing the
   *                  action.
   * @param label     The label displayed in menu items and on buttons.
   * @param tooltip   A tooltip for the action.
   * @param is_active The default checked state of the action.
   *
   * @return A new ToggleAction.
   */
   static Glib::RefPtr<ToggleAction> create_with_icon_name(const Glib::ustring& name, const Glib::ustring& icon_name, const Glib::ustring& label, const Glib::ustring& tooltip, bool is_active = false);

  _WRAP_METHOD(void toggled(), gtk_toggle_action_toggled)
  _WRAP_METHOD(void set_active(bool is_active = true), gtk_toggle_action_set_active)
  _WRAP_METHOD(bool get_active() const, gtk_toggle_action_get_active)
  _WRAP_METHOD(void set_draw_as_radio(bool draw_as_radio = true), gtk_toggle_action_set_draw_as_radio)
  _WRAP_METHOD(bool get_draw_as_radio() const, gtk_toggle_action_get_draw_as_radio)

  _WRAP_SIGNAL(void toggled(), "toggled")

  _WRAP_PROPERTY("draw_as_radio", bool)
  _WRAP_PROPERTY("active", bool)
};

} // namespace Gtk

